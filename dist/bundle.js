
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.Treact = factory());
}(this, (function () { 'use strict';

  const TEXT_ELEMENT = 'TEXT_ELEMENT';
  const UPDATE = 'UPDATE';
  const PLACEMENT = 'PLACEMENT';
  const DELETION = 'DELETION';

  function createElement(type, props, ...children) {
    return {
      type,
      props: {
        ...props,
        children: children.map(child => {
          return typeof child === 'string' 
            ? createTextElement(child)
            : child
        })
      }
    }
  }

  function createTextElement(text) {
    return {
      type: TEXT_ELEMENT,
      props: {
        nodeValue: text,
        children: []
      }
    }
  }

  const isProperty = key => key !== 'children' && !isEvent(key);
  const isEvent = key => key.startsWith('on');
  const isNew = (prev, next) => key => prev[key] !== next[key];
  const isGone = (prev, next) => key => !(key in next);

  /**
   *
   * @param {String} type
   */
  function createDOM (type) {
    const $dom = type === TEXT_ELEMENT
      ? document.createTextNode('')
      : document.createElement(type);

    return $dom
  }

  /**
   *
   * @param {HTMLElement} dom
   * @param {Object} oldProps
   * @param {Object} newProps
   */
  function updateDOM (dom, oldProps, newProps) {
    Object.keys(oldProps)
      .filter(isEvent)
      .filter(key => !(key in newProps) || oldProps[key] !== newProps[key])
      .forEach(key => {
        const event = key.toLowerCase().substring(2);
        dom.removeEventListener(event, oldProps[key]);
      });

    Object.keys(oldProps)
      .filter(isProperty)
      .filter(isGone(oldProps, newProps))
      .forEach(key => {
        dom[key] = '';
      });

    Object.keys(newProps)
      .filter(isEvent)
      .filter(isNew(oldProps, newProps))
      .forEach(key => {
        const event = key.toLowerCase().substring(2);
        dom.addEventListener(event, newProps[key]);
      });

    Object.keys(newProps)
      .filter(isProperty)
      .filter(isNew(oldProps, newProps))
      .forEach(key => {
        dom[key] = newProps[key];
      });
  }

  /**
   *
   * @param {Fiber} wipFiber
   * @param {Element[]} elements
   */
  function reconcileChildren (wipFiber, elements) {
    let index = 0;
    let prevSibling = null;
    let oldFiber = wipFiber.alternate && wipFiber.alternate.child;

    while (index < elements.length) {
      const element = elements[index];
      const isSameType = oldFiber && element && oldFiber.type === element.type;
      let newFiber = null;

      if (isSameType) {
        newFiber = {
          type: oldFiber.type,
          props: element.props,
          dom: oldFiber.dom, // 更新同一个DOM
          parent: wipFiber,
          effectTag: UPDATE,
          alternate: oldFiber
        };
      } else if (element && !isSameType) {
        newFiber = {
          type: element.type,
          props: element.props,
          dom: null,
          parent: wipFiber,
          effectTag: PLACEMENT,
          alternate: null
        };
      } else if (oldFiber && !isSameType) {
        oldFiber.effectTag = DELETION;
      }

      if (oldFiber) {
        oldFiber = oldFiber.sibling;
      }

      if (index === 0) {
        wipFiber.child = newFiber;
      } else {
        prevSibling.sibling = newFiber;
      }

      prevSibling = newFiber;
      index++;
    }
  }

  /**
   * Fiber
   * {
   *  type: string
   *  props: {
   *    children: Element[]
   *  }
   *  dom: HTMLElement
   *  parent: Fiber
   *  child: Fiber
   *  sibling: Fiber
   *  alternate: Fiber
   *  effectTag: string
   * }
   */

  /**
   * 时间切片
   * 将每个Element切分为一个小的工作单元
   */

  let unitOfWork = null;
  let wipRoot = null; // 保存fiber tree的根结点， work in progress root
  const deletions = [];

  function commitRoot () {
    deletions.forEach(commitWork);
    commitWork(wipRoot.child);
    wipRoot = null;
  }

  /**
   * 操作节点，更新，删除，添加
   * @param {Fiber} fiber
   */
  function commitWork (fiber) {
    if (!fiber) {
      return
    }
    if (fiber.effectTag === PLACEMENT) {
      const parentDOM = fiber.parent.dom;
      parentDOM.appendChild(fiber.dom);
    } else if (fiber.effectTag === UPDATE) {
      updateDOM(fiber.dom, fiber.alternate.props, fiber.props);
    } else if (fiber.effectTag === DELETION) ;
    commitWork(fiber.child);
    commitWork(fiber.sibling);
  }

  /**
   * 浏览器空闲时执行工作
   * @param {IdleDeadline} deadline
   */
  function workLoop (deadline) {
    let shouldPause = false;

    while (unitOfWork && !shouldPause) {
      unitOfWork = performUnitOfWork(unitOfWork);
      shouldPause = deadline.timeRemaining() < 20;
    }

    // 避免渲染部分UI
    if (!unitOfWork && wipRoot) {
      commitRoot();
    }

    window.requestIdleCallback(workLoop);
  }

  window.requestIdleCallback(workLoop);

  /**
   * 每一次工作处理一个Fiber元素
   * 1. 添加DOM
   * 2. 构建Fiber节点
   * 3. 返回下一个Fiber节点
   * @param {Fiber} fiber
   */
  function performUnitOfWork (fiber) {
    const { type, dom, props } = fiber;
    if (!dom) {
      fiber.dom = createDOM(type);
      updateDOM(fiber.dom, {}, fiber.props);
    }

    reconcileChildren(fiber, props.children);

    if (fiber.child) {
      return fiber.child
    }
    let nextFiber = fiber;
    while (nextFiber) {
      if (nextFiber.sibling) {
        return nextFiber.sibling
      }
      nextFiber = nextFiber.parent;
    }
  }

  function setUnitOfWork (work) {
    unitOfWork = work;
  }

  function setWipRoot (fiberRoot) {
    wipRoot = fiberRoot;
  }

  function render (element, container) {
    const fiberRoot = {
      dom: container,
      props: {
        children: [element]
      },
      alternate: null
    };
    setUnitOfWork(fiberRoot);
    setWipRoot(fiberRoot);
  }

  var index = {
    createElement,
    render
  };

  return index;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
